import Config from '../Config.es6lib';
import Utils from '../utils/Utils.es6lib';

class _Europeana {
  constructor() {
    const providers = [
      'Comhaltas Traditional Music Archive',
      'Irish Traditional Music Archive',
    ];
    this._qfProvider = this._getProviders(providers);
  }

  searchAsync($http, tune, start = 1, maxNumItems = 20) {
    return new Promise((resolve, reject) => {
      const apiDomain = Config.EuropeanaApiDomain;
      const apiKey = Config.EuropeanaApiKey;
      const profile = 'standard';
      const qfSound = encodeURIComponent('TYPE:SOUND');
      const qfProvider = this._qfProvider;
      const query = this._getQuery(tune.title, tune.altTitle);

      const url = `${apiDomain}/search.json?wskey=${apiKey}&query=${query}&qf=${qfSound}&qf=${qfProvider}&start=${start}&rows=${maxNumItems}&profile=${profile}`;

      $http.get(url)
      .success(data => {
        Utils.cache.europeana = {id: tune.tunepalId, results: data};
        resolve(data);
      });
    });
  }

  _getQuery(...keywords) {
    if (keywords.length === 0) {
      return '';
    }

    let query = this._cleanupQuery(keywords[0]);

    for (let i = 1; i < keywords.length; i++) {
      if (keywords[i]) {
        const keyword = this._cleanupQuery(keywords[i]);
        query += query.length > 0 ? ` OR "${keyword}"` : `"${keyword}"`;
      }
    }

    return encodeURIComponent(query);
  }

  _cleanupQuery(keyword) {
    if (!keyword) {
      return '';
    }

    keyword = keyword.replace(
      /\b(reel|jig|hornpipe|polka|waltz|mazurka|THE|AT|AND|OF|TO|BUT|SO|FOR|AN|I|IN|ON|YOUR|A|WITH)\b|[\u2000-\u206F\u2E00-\u2E7F\\'!"#\$%&\(\)\*\+,\-\.\/:;<=>\?@\[\]\^_`\{\|\}~]/gi,
      '');
    keyword = keyword.replace(/(\s)+/g, ' ');

    return keyword;
  }

  _getProviders(providers) {
    if (providers.length === 0) {
      return '';
    }

    let query = `DATA_PROVIDER:"${providers[0]}"`;

    for (let i = 1; i < providers.length; i++) {
      query += ` OR "${providers[i]}"`;
    }

    return encodeURIComponent(query);
  }

  fetchRecordAsync($http, europeanaId) {
    return new Promise((resolve, reject) => {
      const apiDomain = Config.EuropeanaApiDomain;
      const apiKey = Config.EuropeanaApiKey;

      const url = `${apiDomain}/record/${europeanaId}.json?wskey=${apiKey}`;

      $http.get(url)
      .success(result => resolve(result));
    });
  }

  getPortalUrl(tune) {
    const domain = Config.EuropeanaPortalDomain;
    const query = this._getQuery(tune.title, tune.altTitle);
    const qfSound = encodeURIComponent('TYPE:SOUND');
    const qfProviders = this._qfProvider;

    return `${domain}?query=${query}&qf=${qfSound}&qf=${qfProviders}`;
  }
}

const Europeana = new _Europeana();

export default Europeana;

//TODO: automated front-end testing
if (Config.isTesting) {
  (function testCleanupQuery() {
    const a = Europeana._cleanupQuery('ABC DEF reel polka the At I A., | {} HIJ');
    const b = 'ABC DEF HIJ';
    console.assert(a === b, a, '!==', b);
  })();
}
