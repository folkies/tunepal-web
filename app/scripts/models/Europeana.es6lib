import Config from '../Config.es6lib';
import Utils from '../utils/Utils.es6lib';

class _Europeana {
  searchAsync($http, tune, start = 1, maxNumItems = 20) {
    return new Promise((resolve, reject) => {
      const apiDomain = Config.EuropeanaApiDomain;
      const apiKey = Config.EuropeanaApiKey;
      const profile = 'standard';
      const qfSound = encodeURIComponent('TYPE:SOUND');
      const query = this._getQuery(tune.title, tune.altTitle);

      const providers = [
        'Comhaltas Traditional Music Archive',
        'Irish Traditional Music Archive',
      ];
      const qfProvider = this._getProviders(providers);

      const url = `${apiDomain}/search.json?wskey=${apiKey}&query=${query}&qf=${qfSound}&qf=${qfProvider}&start=${start}&rows=${maxNumItems}&profile=${profile}`;

      $http.get(url)
      .success(data => {
        Utils.cache.europeana = {id: tune.tunepalId, results: data};
        resolve(data);
      });
    });
  }

  _getQuery(...keywords) {
    if (keywords.length === 0) {
      return '';
    }

    let query = keywords[0] || '';

    for (let i = 1; i < keywords.length; i++) {
      if (keywords[i]) {
        query += query.length > 0 ? ` OR "${keywords[i]}"` : `"${keywords[i]}"`;
      }
    }

    return encodeURIComponent(query);
  }

  _getProviders(providers) {
    if (providers.length === 0) {
      return '';
    }

    let query = `DATA_PROVIDER:"${providers[0]}"`;

    for (let i = 1; i < providers.length; i++) {
      query += ` OR "${providers[i]}"`;
    }

    return encodeURIComponent(query);
  }

  fetchRecordAsync($http, europeanaId) {
    return new Promise((resolve, reject) => {
      const apiDomain = Config.EuropeanaApiDomain;
      const apiKey = Config.EuropeanaApiKey;

      const url = `${apiDomain}/record/${europeanaId}.json?wskey=${apiKey}`;

      $http.get(url)
      .success(result => resolve(result));
    });
  }
}

const Europeana = new _Europeana();

export default Europeana;
