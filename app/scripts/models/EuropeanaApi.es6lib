import Config from '../Config.es6lib';
import EuropeanaTune from './EuropeanaTune.es6lib';
import Utils from '../utils/Utils.es6lib';

class _EuropeanaApi {
  constructor() {
    const providers = [
      'Comhaltas Traditional Music Archive',
      'Irish Traditional Music Archive',
    ];
    this._qfProvider = this._getProviders(providers);
  }

  // search tune and return the raw results
  rawSearchAsync($http, tune, start = 1, maxNumItems = 20) {
    return new Promise((resolve, reject) => {
      const apiDomain = Config.EuropeanaApiDomain;
      const apiKey = Config.EuropeanaApiKey;
      const profile = 'portal';
      const qfSound = encodeURIComponent('TYPE:SOUND');
      const qfProvider = this._qfProvider;
      const query = this._getQuery(tune.title, tune.altTitle);

      const url = `${apiDomain}/search.json?wskey=${apiKey}&query=${query}&qf=${qfSound}&qf=${qfProvider}&start=${start}&rows=${maxNumItems}&profile=${profile}`;

      $http.get(url)
      .success(rawResults => resolve(rawResults));
    });
  }

  fetchRecordAsync($http, europeanaId) {
    return new Promise((resolve, reject) => {
      const apiDomain = Config.EuropeanaApiDomain;
      const apiKey = Config.EuropeanaApiKey;

      const url = `${apiDomain}/record/${europeanaId}.json?wskey=${apiKey}`;

      $http.get(url)
      .success(rawResult => resolve(rawResult));
    });
  }

  getPortalUrl(tune) {
    const domain = Config.EuropeanaPortalDomain;
    const query = this._getQuery(tune.title, tune.altTitle);
    const qfSound = encodeURIComponent('TYPE:SOUND');
    const qfProviders = this._qfProvider;

    return `${domain}?query=${query}&qf=${qfSound}&qf=${qfProviders}`;
  }

  // search tune and convert raw results to normalized EuropeanaTune objects
  searchAsync($http, tune, start = 1, maxNumItems = 20) {
    return this.rawSearchAsync($http, tune, start, maxNumItems)
    .then(rawResults => {
      const results = {totalResults: rawResults.totalResults};

      if (!rawResults.items) {
        results.items = [];
        return Promise.resolve(results);
      }

      results.items = new Array(rawResults.items.length);

      for (let i = 0; i < results.items.length; i++) {
        results.items[i] = EuropeanaTune.fromSearch(rawResults.items[i]);
      }

      return Promise.resolve(results);
    });
  }

  // search tune, fetch audio urls one by one
  // and convert raw results to normalized EuropeanaTune objects
  searchFetchAsync($http, tune, $sce, start = 1, maxNumItems = 20) {
    return this.rawSearchAsync($http, tune, start, maxNumItems)
    .then(rawResults => {
      const results = {totalResults: rawResults.totalResults};

      if (!rawResults.items) {
        results.items = [];
        return Promise.resolve(results);
      }

      results.items = new Array(rawResults.items.length);
      const promises = new Array(rawResults.items.length);

      for (let i = 0; i < results.items.length; i++) {
        promises[i] = this.fetchRecordAsync($http, rawResults.items[i].id)
        .then(rawResult => {
          results.items[i] = EuropeanaTune.fromRecord(rawResult.object, $sce);
        });
      }

      return Promise.all(promises)
      .then(() => {
        //TODO: cache europeana results
        //Utils.cache.europeana = {id: tune.tunepalId, results: results};
        return Promise.resolve(results);
      });
    });
  }

  _getQuery(...keywords) {
    if (keywords.length === 0) {
      return '';
    }

    let query = `(${this._cleanupQuery(keywords[0])})`;

    for (let i = 1; i < keywords.length; i++) {
      if (keywords[i]) {
        const keyword = this._cleanupQuery(keywords[i]);
        query += query.length > 0 ? ` OR (${keyword})` : `(${keyword})`;
      }
    }

    return encodeURIComponent(query);
  }

  _cleanupQuery(keyword) {
    if (!keyword) {
      return '';
    }

    keyword = keyword.replace(
      /\b(reel|jig|hornpipe|polka|waltz|mazurka|THE|AT|AND|OF|TO|BUT|SO|FOR|AN|I|IN|ON|YOUR|A|WITH)\b|[\u2000-\u206F\u2E00-\u2E7F\\'!"#\$%&\(\)\*\+,\-\.\/:;<=>\?@\[\]\^_`\{\|\}~]/gi,
      '');
    keyword = keyword.replace(/(\s)+/g, ' ');
    keyword = keyword.trim();

    return keyword;
  }

  _getProviders(providers) {
    if (providers.length === 0) {
      return '';
    }

    let query = `DATA_PROVIDER:"${providers[0]}"`;

    for (let i = 1; i < providers.length; i++) {
      query += ` OR "${providers[i]}"`;
    }

    return encodeURIComponent(query);
  }
}

const EuropeanaApi = new _EuropeanaApi();

export default EuropeanaApi;

//TODO: automated front-end testing
if (Config.isTesting) {
  (function testCleanupQuery() {
    const a = EuropeanaApi._cleanupQuery('ABC DEF reel polka the At I A., | {} HIJ');
    const b = 'ABC DEF HIJ';
    console.assert(a === b, a, '!==', b);
  })();
}
