import Utils from '../../utils/Utils.es6lib';
import TranscriberAsync from '../../transcription/TranscriberAsync.es6lib';

export default class Recorder {
  get sampleTime() { return this.config.sampleTime; }
  set sampleTime(value) { this.config.sampleTime = value; }

  get blankTime() { return this.config.blankTime; }
  set blankTime(value) { this.config.blankTime = value; }

  get fundamental() { return this.config.fundamental; }
  set fundamental(value) { this.config.fundamental = value; }

  get enableSampleRateConversion() { return this.config.enableSampleRateConversion; }
  set enableSampleRateConversion(value) { this.config.enableSampleRateConversion = value; }

  get transcriberFrameSize() { return this.config.transcriberFrameSize; }
  set transcriberFrameSize(value) { this.config.transcriberFrameSize = value; }

  get audioContext() { return this._audioContext; }
  get sampleRate() { return this._audioContext.sampleRate; }
  get amplitude() { return this._amplitude; }
  get timeRecorded() { return this._timeRecorded; }
  get transcription() { return this._transcription; }
  get progress() { return this._timeRecorded / (this.blankTime + this.sampleTime); }
  get numSamples() { return this._audioContext.sampleRate * this.sampleTime; }
  get status() { return this._status; }
  get signal() { return this._signal; }

  constructor(config, audioContext) {
    this.config = config;

    this._status = Recorder.Status.STOPPED;
    this._audioContext = audioContext;

    // see App.onTranscribed()
    this.onTranscribed = () => {};

    this._transcriber = new TranscriberAsync();

    this._transcriber.onProgress = progress => this.analysisProgress = progress;
  }

  initAsync() {
    return new Promise((resolve, reject) => {
      if (this._stream) {
        this._status = Recorder.Status.INIT_SUCCEEDED;
        resolve();
      }
      else if (navigator && navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
        this._status = Recorder.Status.INIT;
        navigator.mediaDevices.getUserMedia({audio: true})
          .then(stream => this._onStream(stream, resolve))
          .catch(error => this._onStreamError(error, reject));
      }
      else {
        this._status = Recorder.Status.API_MISSING;
      }
    });
  }

  close() {
    this._transcriber.close();
  }

  _onStream(stream, resolve) {
    this._stream = stream;
    this._bufferSize = 4096;

    this._input = this._audioContext.createMediaStreamSource(stream);
    this._processor = this._audioContext.createScriptProcessor(this._bufferSize, 1, 1);

    this._processor.onaudioprocess = e => this._update(e);

    this._input.connect(this._processor);
    this._processor.connect(this._audioContext.destination);

    this._status = Recorder.Status.INIT_SUCCEEDED;
    resolve();
  }

  _onStreamError(error, reject) {
    this._status = Recorder.Status.INIT_FAILED;
    reject(error);
  }

  start() {
    if (!this._stream) return;

    let initParams = {
      inputSampleRate: this._audioContext.sampleRate,
      sampleTime: this.sampleTime,
      blankTime: this.blankTime,
      fundamental: this.fundamental,
      enableSampleRateConversion: this.enableSampleRateConversion,
      frameSize: this.transcriberFrameSize,
    };

    this._transcriber.initAsync(initParams)
    .then(() => this._status = Recorder.Status.RECORDING);
  }

  stop() {
    this._status = Recorder.Status.STOPPED;
    this._amplitude = 0;
    this._timeRecorded = 0;
  }

  destroy() {
    this._status = Recorder.Status.STOPPED;
    this._stream && this._stream.stop();
    this._stream = null;
  }

  _update(e) {
    if (this._status != Recorder.Status.RECORDING) {
      return;
    };

    let audio = e.inputBuffer;
    let signalBuffer = audio.getChannelData(0);

    this._transcriber.pushSignalAsync(signalBuffer)
    .then(msg => this._analyzeSignal(msg));
  }

  _analyzeSignal(msg) {
    this._amplitude = msg.amplitude;
    this._timeRecorded = msg.timeRecorded;

    if (!msg.isBufferFull) return;

    this.stop();
    this._status = Recorder.Status.ANALYZING;

    this._transcriber.transcribeAsync()
    .then(result => {
      this._status = Recorder.Status.ANALYSIS_SUCCEEDED;
      this.onTranscribed(result);
      return this._transcriber.getSignalAsync();
    })
    .then(signal => {
      this._signal = signal;
    });
  }
}

Recorder.Status = Utils.createEnum([
  'STOPPED',
  'INIT',
  'INIT_SUCCEEDED',
  'INIT_FAILED',
  'RECORDING',
  'ANALYZING',
  'ANALYSIS_SUCCEEDED',
  'API_MISSING',
]);
