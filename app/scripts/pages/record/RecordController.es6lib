import Recorder from './Recorder.es6lib';
import Renderer from './Renderer.es6lib';
import Config from '../../Config.es6lib';
import Utils from '../../utils/Utils.es6lib';

export default class RecordController {
  constructor($scope, $rootScope, $location) {
    this.$scope = $scope;  // view model
    this.$location = $location;
    this.config = Config;
    this.utils = Utils;
    this.audioContext = this.config.audioContext;

    this.recorder = new Recorder(this.config, this.audioContext);
    this.recorder.onTranscribed = result => this.onTranscribed(result);

    let canvas = $('#canvas')[0];
    let container = canvas.parentNode;

    this.renderer = new Renderer(this.config, this.recorder, canvas, container);

    this._requestId = window.requestAnimationFrame(() => this._update());

    $scope.$on('$routeChangeStart', () => {
      window.cancelAnimationFrame(this._requestId);
      this.recorder.close();
    });

    document.title = 'Tunepal.org / Record';
  }

  _update() {
    this.renderer.draw();

    this._requestId = window.requestAnimationFrame(() => this._update());
  }

  onTranscribed(result) {
    // When the code is executed in angular scope, use $location.url('/someLocation')
    // to prevent navigation breaking history
    // Otherwise use location.href = '/#!/someLocation'
    //   or $scope.$apply(() => $location.url('/someLocation'))
    location.href = `/#!/notesSearch/${result.transcription}`;
  }

  playSignal() {
    if (this.signalPlayer) {
      this.signalPlayer.stop(0);
      this.signalPlayer = null;
    }
    else {
      if (!this._audio) {
        this._audio = this.audioContext.createBuffer(1, this.recorder.numSamples, this.recorder.sampleRate);
        this._audio.copyToChannel(this.recorder.signal, 0);
      }

      this.signalPlayer = this.audioContext.createBufferSource();
      this.signalPlayer.buffer = this._audio;
      this.signalPlayer.connect(this.audioContext.destination);
      this.signalPlayer.onended = this.apply(() => this.signalPlayer = null);
      this.signalPlayer.start(0, 0, this._audio.duration);
    }
  }

  // apply() is used to execute an expression in angular from outside of the angular framework.
  // See https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply
  apply(func, that = this) {
    let wrap = function() {
      let args = arguments;
      return this.$scope.$apply(() => func.apply(that, args));
    };
    return wrap.bind(this);
  }
}
