import ControllerBase from '../../ControllerBase.es6lib';
import Utils from '../../utils/Utils.es6lib';

export default class MidiPlayer extends ControllerBase {
  constructor($scope) {
    super($scope);

    this.ready = false;
    this.isPlaying = false;
    this.isStopped = true;
  }

  initAsync(tune) {
    this.tune = tune;
    console.log('Initializing MIDI.js...');

    this._initPluginAsync()
    .then(() => this._generateMidiAsync())
    .then(() => this._loadMidiAsync())
    .then(this.apply(() => this.ready = true));
  }

  _initPluginAsync() {
    return new Promise((resolve, reject) => {
      MIDI.loadPlugin({
        soundfontUrl: '../../../lib/midi.js/soundfont/',
        instrument: 'acoustic_grand_piano',
        onsuccess: resolve,
      });
    });
  }

  _generateMidiAsync() {
    return new Promise((resolve, reject) => {
      console.log(`ABC: ${this.tune.notation}`);
      this._midi = abc2midi(this.tune.notation);
      const b64encoded = btoa(String.fromCharCode.apply(null, this._midi));
      this._midiUrl = `data:audio/midi;base64,${b64encoded}`;
      resolve(this._midiUrl);
    });
  }

  _loadMidiAsync() {
    return new Promise((resolve, reject) => {
      const onsuccess = () => {
        console.log(`Sound being generated with ${MIDI.api} ${JSON.stringify(MIDI.supports)}`);
        resolve();
      };

      const onprogress = (stats, percent) => {
        percent *= 100;
        console.log(`Reading audio file (${percent.toFixed(2)}%)...`);
      };

      const onerror = e => {
        console.log(`Error: ${e.message}\n${e.stack}`);
      };

      console.log(`MIDI URL: ${this._midiUrl}`);
      MIDI.Player.loadFile(this._midiUrl, onsuccess, onprogress, onerror);

      MIDI.Player.setAnimation(data => {
        const now = data.now < data.end ? data.now : data.end;
        const end = data.end;
        if (now === end) {
          this.$scope.$apply(() => {
            this.isPlaying = false;
            this.isStopped = true;
            MIDI.Player.stop();
          });
        }
      });
    });
  }

  togglePlaying() {
    this.isPlaying ? this.pausePlaying() : this.startPlaying();
  }

  startPlaying() {
    this.isPlaying = true;
    this.isStopped = false;
    MIDI.Player.resume();
  }

  pausePlaying() {
    this.isPlaying = false;
    this.isStopped = false;
    MIDI.Player.pause();
  }

  stopPlaying() {
    this.isPlaying = false;
    this.isStopped = true;
    MIDI.Player.stop();
  }

  download() {
    const blob = Utils.blob.dataURLToBlob(this._midiUrl);
    saveAs(blob, `${this.tune.title}.midi`);
  }
}
