import Config from '../../Config.es6lib';
import Tune from '../../models/Tune.es6lib';
import Utils from '../../utils/Utils.es6lib';


export default class TuneController {
  constructor($scope, $rootScope, $routeParams, $http, $timeout, $sce) {
    this.$rootScope = $rootScope;
    this.$timeout = $timeout;
    this.$http = $http;
    this.$sce = $sce;
    this.config = Config;
    this.utils = Utils;

    this.loaded = false;
    this.isPlaying = false;
    this.isEditing = false;

    this.tunepalId = $routeParams['tunepalId'];
    this.europeanaIdEncoded = $routeParams['europeanaIdEncoded'];

    if (Utils.tuneCache && Utils.tuneCache.tunepalId === this.tunepalId) {
      this.tune = Utils.tuneCache;
      this._initTune();
    }
    else {
      const url = `${this.config.ApiDomain}/api/Tunes/${this.tunepalId}`;

      this.$http.get(url)
      .success(rawTune => {
        this.tune = new Tune(rawTune);
        Utils.tuneCache = this.tune;
        this._initTune();
      });
    }

    if (this.europeanaIdEncoded) {
      this._initEuropeana();
    }
	
	// MIDI Playback
	this._audioContext = new window.AudioContext();
    this.midiPluginReady = false;
    this.midiPlayerReady = false;
	this._initMidi();
	
    this._initUi();
  }
  
  _initMidi() {
    console.log("Initializing MIDI.js...");

    MIDI.loadPlugin({
      soundfontUrl: '../../../lib/midi.js/soundfont/',
      instrument: "acoustic_grand_piano",
      onsuccess: this.apply(() => {
        this.midiPluginReady = true;
        console.log("Midi.js ready");
      }),
      onprogress: this.apply((state, percent) => {
        percent *= 100;
        console.log("Initializing MIDI.js (${percent.toFixed(2)}%)...");
      }),
    });
  }
  
  _initTune() {
    this.loaded = true;
    this.$timeout(() => this._createAbcEditor());
    document.title = `Tunepal.org / Tune / ${this.tune.title}`;
  }

  _initEuropeana() {
    this.europeanaId = decodeURIComponent(this.europeanaIdEncoded);
    const apiDomain = this.config.EuropeanaApiDomain;
    const apiKey = this.config.EuropeanaApiKey;

    const url = `${apiDomain}/record/${this.europeanaId}.json?wskey=${apiKey}`;

    this.$http.get(url)
    .success(europeana => {
      this.europeana = europeana.object;

      const soundUrl = this.europeana.aggregations[0].edmIsShownBy;
      if (soundUrl) {
        this.europeanaSoundUrl = this.$sce.trustAsResourceUrl(soundUrl);
      }
    });
  }

  _initUi() {
    this.$timeout(() => {
      $('.dropdown-button').dropdown({
        constrain_width: false,
      });

      $('.tooltipped').tooltip({
        position: 'bottom',
        delay: 50,
      });
    });

    $(window).resize(() => this._resizeScore());
  }

  _createAbcEditor() {
    $('#abc').val(this.tune.notation);

    this.abcEditor = new ABCJS.Editor('abc', {
      paper_id: 'score',
      onchange: () => this._resizeScore(),
    });

    this._resizeScore();
  }

  _resizeScore() {
    const score = $('#score');
    const cardScore = $('#card-score');
    const cardContent = $('.score.card-content');
    const scale = cardScore.width() / score.width();
    cardScore.css('transform', `scale(${scale})`);
    cardContent.height(cardScore.height() * scale);
  }

  goBack() {
    if (history.length == 1) {
      location.href = '/#!/record';
    }
    else {
      history.back();
    }
  }
  
	_getAudioUrlAsync() {
		return new Promise((resolve, reject) => {
			console.log(`ABC: ${this.tune.notation}`);
			this.midi = abc2midi(this.tune.notation);
			const b64encoded = btoa(String.fromCharCode.apply(null, this.midi));
			this.midiUrl = `data:application/octet-stream;base64,${b64encoded}`;
			resolve(this.midiUrl);
		});
	}

  togglePlaying() {
    this.isPlaying = !this.isPlaying;
	
	if (!this.midi)
	{
		this._getAudioUrlAsync()
		.then(url => {
		  MIDI.Player.setAnimation(data => {
			let now = data.now < data.end ? data.now : data.end;
			now = now.toFixed(2);
			let end = data.end.toFixed(2);
			//$('#currentTime').text(now);
			//$('#endTime').text(end);
		  });

		  const onsuccess = this.apply(() => {
			console.log("Sound being generated with ${MIDI.api} ${JSON.stringify(MIDI.supports)}");
			this.midiPlayerReady = true;
			MIDI.Player.start();
		  });

		  const onprogress = this.apply((stats, percent) => {
			percent *= 100;
			console.log("Reading audio file (${percent.toFixed(2)}%)...");
		  });

		  const onerror = this.apply(e => {
			console.log("Error: ${e.message}\n${e.stack}");
		  });

		  console.log("MIDI URL: " + url);
		  MIDI.Player.loadFile(url, onsuccess, onprogress, onerror);
		});		
	}
	if (this.isPlaying)
	{
		
		MIDI.Player.resume();
	}
	else
	{
		MIDI.Player.pause();
	}
  }

  stopPlaying() {
    this.isPlaying = false;
  }

  toggleEditing() {
    this.isEditing = !this.isEditing;

    this.$timeout(() => {
      this._resizeScore();

      // scroll to active element
      const scrollTop = this.isEditing
        ? $('#card-editor').offset().top - $('#card-score').offset().top
        : 0;

      $("html, body").animate({scrollTop: scrollTop}, 500);
    });
  }

  downloadMidi() {
    const hiddenMidi = $('#hiddenMidi');
    const midiWriter = new ABCJS.midi.MidiWriter(hiddenMidi[0]);
    midiWriter.writeABC(this.abcEditor.tunes[0]);
    const midi = hiddenMidi.children('a').attr('href');

    const blob = this.dataURLToBlob(midi);
    saveAs(blob, `${this.tune.title}.midi`);
  }

  dataURLToBlob(dataURL) {
    const BASE64_MARKER = ';base64,';

    if (dataURL.indexOf(BASE64_MARKER) == -1) {
      // percent encoded
      const parts = dataURL.split(',');
      const contentType = parts[0].split(':')[1];
      const raw = parts[1];
      const numPercent = (raw.match(/%/g) || []).length;
      const length = raw.length - numPercent * 2;
      const uInt8Array = new Uint8Array(length);

      for (let i = 0, j = 0; i < raw.length; j++) {
        if (raw[i] === '%') {
          const code = raw.substr(i + 1, 2);
          uInt8Array[j] = parseInt(code, 16);
          i += 3;
        }
        else {
          uInt8Array[j] = raw.charCodeAt(i);
          i++;
        }
      }

      return new Blob([uInt8Array], {type: contentType});
    }
    else {
      // base64 encoded
      const parts = dataURL.split(BASE64_MARKER);
      const contentType = parts[0].split(':')[1];
      const raw = window.atob(parts[1]);
      const rawLength = raw.length;

      const uInt8Array = new Uint8Array(rawLength);

      for (let i = 0; i < rawLength; ++i) {
        uInt8Array[i] = raw.charCodeAt(i);
      }

      return new Blob([uInt8Array], {type: contentType});
    }
  }

  showAddThis() {
    const addThisButton = document.getElementById('at4m-sb');
    addThisButton.click();
  }

  toggleToolbar() {
    if (Utils.view.isMobile) {
      $('.page-header nav').fadeToggle();
    }
  }
  
  // apply() is used to execute an expression in angular from outside of the angular framework.
  // See https://docs.angularjs.org/api/ng/type/$rootScope.Scope#$apply
  apply(func, that = this) {
    const wrap = function() {
      const args = arguments;
      return this.$scope.$apply(() => func.apply(that, args));
    };
    return wrap.bind(this);
  }
}
