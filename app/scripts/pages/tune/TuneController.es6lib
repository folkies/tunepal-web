import ControllerBase from '../../ControllerBase.es6lib';
import Config from '../../Config.es6lib';
import Europeana from '../../models/Europeana.es6lib';
import Tune from '../../models/Tune.es6lib';
import Utils from '../../utils/Utils.es6lib';
import MidiPlayer from './MidiPlayer.es6lib';

export default class TuneController extends ControllerBase {
  constructor($scope, $rootScope, $routeParams, $http, $timeout, $sce, $localForage) {
    super($scope);
    this.$rootScope = $rootScope;
    this.$timeout = $timeout;
    this.$http = $http;
    this.$sce = $sce;
    this.config = Config;
    this.utils = Utils;

    this.showTune = false;
    this.showEuropeana = false;
    this.isEditing = false;

    // MIDI Playback
    this.midi = new MidiPlayer(this.$scope);
    this.$scope.$watchCollection('midi', () => {});

    this.tunepalId = $routeParams['tunepalId'];

    if (Utils.cache.tune && Utils.cache.tune.tunepalId === this.tunepalId) {
      this.tune = Utils.cache.tune;
      this._initTune();
    }
    else {
      this._fetchTune();
    }

    this._initUi();
  }

  _fetchTune() {
    const url = `${this.config.ApiDomain}/api/Tunes/${this.tunepalId}`;

    this.$http.get(url)
    .success(rawTune => {
      this.tune = new Tune(rawTune);
      Utils.cache.tune = this.tune;
      this._initTune();
    });
  }

  _initTune() {
    this._initEuropeana();
    this.midi.initAsync(this.tune);

    this._initUi();
    this.$timeout(() => this._createAbcEditor());
    document.title = `Tunepal.org / Tune / ${this.tune.title}`;
    this.showTune = true;
  }

  _initEuropeana() {
    const numDefaultTunes = 5;
    this._europeanaIdsDb = Utils.localStorage.getItem('europeanaIds');
    this._europeanaIdsDb = this._europeanaIdsDb || {};
    this._europeanaIds = this._europeanaIdsDb[this.tune.tunepalId];

    if (this._europeanaIds) {
      this._initEuropeanaTunes();
    }
    else {
      Europeana.searchAsync(this.$http, this.tune)
      .then(results => {
        this._europeanaIds = results.items.slice(0, numDefaultTunes).map(item => item.id);
        this._europeanaIdsDb[this.tune.tunepalId] = this._europeanaIds;
        Utils.localStorage.setItem('europeanaIds', this._europeanaIdsDb);
        this._initEuropeanaTunes();
      });
    }
  }

  _initEuropeanaTunes() {
    const numThreads = 2;
    const europeanaTunes = new Array(this._europeanaIds.length);
    let cur = 0;
    let numFinished = 0;

    const fetchRecordAsync = () => {
      if (cur >= this._europeanaIds.length) {
        if (numFinished >= this._europeanaIds.length) {
          this.$scope.$apply(() => {
            this.europeanaTunes = europeanaTunes;
            this.$timeout(() => this.utils.view.initTooltips());
            this.showEuropeana = true;
          });
        }
        return;
      }

      const id = cur;
      const europeanaId = this._europeanaIds[cur++];
      Europeana.fetchRecordAsync(this.$http, europeanaId)
      .then(result => {
        europeanaTunes[id] = result.object;

        const soundUrl = result.object.aggregations[0].edmIsShownBy;
        if (soundUrl) {
          result.object.tpSoundUrl = this.$sce.trustAsResourceUrl(soundUrl);
        }
      })
      .then(() => {
        numFinished++;
        fetchRecordAsync();
      });
    };

    for (let i = 0; i < numThreads; i++) {
      fetchRecordAsync();
    }
  }

  _initUi() {
    this.$timeout(() => {
      this.utils.view.initDropdown();
      this.utils.view.initTooltips();
    });

    $(window).resize(() => this._resizeScore());
  }

  _createAbcEditor() {
    $('#abc').val(this.tune.notation);

    this.abcEditor = new ABCJS.Editor('abc', {
      paper_id: 'score',
      onchange: () => this._resizeScore(),
    });

    this._resizeScore();
  }

  _resizeScore() {
    const score = $('#score');
    const cardScore = $('#card-score');
    const cardContent = $('.score.card-content');
    const scale = cardScore.width() / score.width();
    cardScore.css('transform', `scale(${scale})`);
    cardContent.height(cardScore.height() * scale);
  }

  toggleEditing() {
    this.isEditing = !this.isEditing;

    this.$timeout(() => {
      this._resizeScore();

      // scroll to active element
      const scrollTop = this.isEditing
        ? $('#card-editor').offset().top - $('#card-score').offset().top
        : 0;

      $('html, body').animate({scrollTop: scrollTop}, 500);
    });
  }

  showAddThis() {
    const addThisButton = document.getElementById('at4m-sb');
    addThisButton.click();
  }

  toggleToolbar() {
    if (Utils.view.isMobile) {
      $('.page-header nav').fadeToggle();
    }
  }

  unlinkEuropeanaTune(index) {
    this._europeanaIds.splice(index, 1);
    Utils.localStorage.setItem('europeanaIds', this._europeanaIdsDb);
    this.europeanaTunes.splice(index, 1);
  }
}
