import Config from '../../Config.es6lib';

export default class TuneController {
  constructor($scope, $rootScope, $routeParams, $http, $timeout) {
    this.$rootScope = $rootScope;
    this.$timeout = $timeout;
    this.config = Config;

    this.loaded = false;
    this.isPlaying = false;
    this.isEditing = false;

    $timeout(() => {
      $('.dropdown-button').dropdown({
        constrain_width: false
      });
    });

    this.tunepalId = $routeParams['id'];
    const url = `${this.config.ApiDomain}/api/Tunes/${this.tunepalId}`;

    $http.get(url)
    .success(data => {
      this.tune = data;
      this.loaded = true;
      this.$timeout(() => this._createAbcEditor());
    });
  }

  _createAbcEditor() {
    $('#abc').val(this.tune.notation);

    this.abcEditor = new ABCJS.Editor('abc', {
      paper_id: 'score',
      onchange: () => this._scaleScore(),
    });

    this._scaleScore();

    this.tune.titleEncoded = encodeURIComponent(this.tune.title);
  }

  _scaleScore() {
    const score = $('#score');
    const cardScore = $('#card-score');
    const cardContent = $('.score.card-content');
    const scale = cardScore.width() / score.width();
    cardScore.css('transform', `scale(${scale})`);
    cardContent.height(cardScore.height() * scale);
  }

  goBack() {
    if (history.length == 1) {
      location.href = '/#!/record';
    }
    else {
      history.back();
    }
  }

  togglePlaying() {
    this.isPlaying = !this.isPlaying;
    this.$rootScope.$emit(this.isPlaying ? 'play' : 'pause');
  }

  stopPlaying() {
    this.isPlaying = false;
    this.$rootScope.$emit('stop');
  }

  toggleEditing() {
    this.isEditing = !this.isEditing;

    this.$timeout(() => this._scaleScore());
  }
}
