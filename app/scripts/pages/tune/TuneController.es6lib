import ControllerBase from '../../ControllerBase.es6lib';
import Config from '../../Config.es6lib';
import EuropeanaApi from '../../models/EuropeanaApi.es6lib';
import Tune from '../../models/Tune.es6lib';
import TunepalApi from '../../models/TunepalApi.es6lib';
import Utils from '../../utils/Utils.es6lib';
import MidiPlayer from './MidiPlayer.es6lib';

export default class TuneController extends ControllerBase {
  constructor($scope, $rootScope, $routeParams, $http, $timeout, $sce, $localForage) {
    super($scope);
    this.$rootScope = $rootScope;
    this.$timeout = $timeout;
    this.$http = $http;
    this.$sce = $sce;
    this.config = Config;
    this.utils = Utils;

    this.showTune = false;
    this.showEuropeanaResults = false;
    this.showEuropeanaLoading = false;
    this.showEuropeanaNoResults = false;
    this.isEditing = false;

    // MIDI Playback
    this.midi = new MidiPlayer(this.$scope);
    this.$scope.$watchCollection('midi', () => {});

    this.tunepalIdEncoded = $routeParams['tunepalIdEncoded'];
    this.tunepalId = decodeURIComponent(this.tunepalIdEncoded);

    if (Utils.cache.tune.tunepalId === this.tunepalId) {
      this.tune = Utils.cache.tune;
      this._initTune();
    }
    else {
      TunepalApi.fetchTuneAsync(this.$http, this.tunepalIdEncoded)
      .then(tune => {
        this.tune = tune;
        this._initTune();
      });
    }

    this._initUi();

    $scope.$on('$routeChangeStart', () => {
      this.midi.stopPlaying();
    });
  }

  _initTune() {
    this.midi.initAsync(this.tune);
    this._initUi();
    this.$timeout(() => this._createAbcEditor());
    document.title = `Tunepal.org > Tune > ${this.tune.title}`;
    this.showTune = true;

    this.showEuropeanaLoading = true;
    this._initEuropeana();
  }

  _initEuropeana() {
    this.europeanaPortalUrl = EuropeanaApi.getPortalUrl(this.tune);

    const numDefaultTunes = 5;

    EuropeanaApi.searchAsync(this.$http, this.tune)
    .then(results => {
      this._europeanaIds = results.items
        ? results.items.slice(0, numDefaultTunes).map(item => item.id)
        : [];
      this._initEuropeanaTunes();
    });
  }

  _initEuropeanaTunes() {
    if (this._europeanaIds.length === 0) {
      this.showEuropeanaLoading = false;
      this.showEuropeanaNoResults = true;
      return;
    }

    const numThreads = 2;
    const europeanaTunes = new Array(this._europeanaIds.length);
    let cur = 0;
    let numFinished = 0;

    const fetchRecordAsync = () => {
      if (cur >= this._europeanaIds.length) {
        if (numFinished >= this._europeanaIds.length) {
          this.$scope.$apply(() => {
            this.europeanaTunes = europeanaTunes;
            this.$timeout(() => this.utils.view.initTooltips());
            this.showEuropeanaResults = true;
            this.showEuropeanaLoading = false;
          });
        }
        return;
      }

      const id = cur;
      const europeanaId = this._europeanaIds[cur++];
      EuropeanaApi.fetchRecordAsync(this.$http, europeanaId)
      .then(result => {
        europeanaTunes[id] = result.object;

        const soundUrl = result.object.aggregations[0].edmIsShownBy;
        if (soundUrl) {
          result.object.tpSoundUrl = this.$sce.trustAsResourceUrl(soundUrl);
        }
      })
      .then(() => {
        numFinished++;
        fetchRecordAsync();
      });
    };

    for (let i = 0; i < numThreads; i++) {
      fetchRecordAsync();
    }
  }

  _initUi() {
    this.$timeout(() => {
      this.utils.view.initDropdown();
      this.utils.view.initTooltips();
    });

    $(window).resize(this.apply(() => {
      this._changeLayout();
      this._resizeScore();
    }));

    this._changeLayout();
  }

  _changeLayout() {
    this.isLandscape = Utils.view.isLandscape;
  }

  _createAbcEditor() {
    $('#abc').val(this.tune.notation);

    this.abcEditor = new ABCJS.Editor('abc', {
      paper_id: 'score',
      onchange: () => this._resizeScore(),
    });

    this._resizeScore();
  }

  _resizeScore() {
    const cardContent = $('.score.card-content');
    const cardScore = $('#card-score');
    const score = $('#score');

    const windowWidth = $(window).width();
    const windowHeight = $(window).height();
    let scale = cardScore.width() / score.width();

    if (!this.isEditing || this.isLandscape) {
      cardScore.css('transform', `scale(${scale})`);
      cardContent.height(cardScore.height() * scale);
    }
    else {
      // The "64" below is the pixels of navbar, see _variables.scss:
      // $navbar-height: 64px !default;
      const halfHeight = Utils.view.isMediumOrDown
        ? windowHeight / 2
        : (windowHeight - 64) / 2;

      let cardContentHeight = cardScore.height() * scale;

      if (cardContentHeight > halfHeight) {
        cardContentHeight = halfHeight;
        scale = cardContentHeight / score.height();
      }

      cardScore.css('transform', `scale(${scale})`);
      cardContent.height(cardContentHeight);
    }
  }

  toggleEditing() {
    this.isEditing = !this.isEditing;

    this.$timeout(() => {
      this._resizeScore();

      if (this.isEditing) {
        // scroll to active element
        const scrollTop = $('#card-score').offset().top;
        $('html, body').animate({scrollTop: scrollTop}, 500);
      }
    });
  }

  showAddThis() {
    const addThisButton = document.getElementById('at4m-sb');
    addThisButton.click();
  }

  downloadAbc() {
    const blob = new Blob([this.tune.notation], {type: 'text/vnd.abc'});
    saveAs(blob, `${this.tune.title}.abc`);
  }
}
