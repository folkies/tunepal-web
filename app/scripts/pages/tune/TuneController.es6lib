import ControllerBase from '../../ControllerBase.es6lib';
import Config from '../../Config.es6lib';
import EuropeanaApi from '../../models/EuropeanaApi.es6lib';
import Tune from '../../models/Tune.es6lib';
import TunepalApi from '../../models/TunepalApi.es6lib';
import Utils from '../../utils/Utils.es6lib';
import MidiPlayer from './MidiPlayer.es6lib';

export default class TuneController extends ControllerBase {
  constructor($scope, $rootScope, $routeParams, $http, $timeout, $sce, $localForage) {
    super($scope);
    this.$rootScope = $rootScope;
    this.$timeout = $timeout;
    this.$http = $http;
    this.$sce = $sce;
    this.config = Config;
    this.utils = Utils;

    this.showTune = false;
    this.showEuropeanaResults = false;
    this.showEuropeanaLoading = false;
    this.showEuropeanaNoResults = false;
    this.isEditing = false;

    // MIDI Playback
    this.midi = new MidiPlayer(this.$scope, this.$timeout);
    this.$scope.$watchCollection('midi', () => {});

    this.tunepalIdEncoded = $routeParams['tunepalIdEncoded'];
    this.tunepalId = decodeURIComponent(this.tunepalIdEncoded);

    if (Utils.cache.tune.tunepalId === this.tunepalId) {
      this.tune = Utils.cache.tune;
      this._initTune();
    }
    else {
      TunepalApi.fetchTuneAsync(this.$http, this.tunepalIdEncoded)
      .then(tune => {
        this.tune = tune;
        this._initTune();
      });
    }

    this._initUi();

    $scope.$on('$routeChangeStart', () => {
      this.midi.stopPlaying();
      $('#toast-container .toast').hide();
    });
  }

  _initTune() {
    if (Utils.view.isLarge) {
      Materialize.toast('Generating MIDI...', 300000);
    }
    else {
      Materialize.toast('Generating MIDI... It might take a while on mobile.', 300000);
    }

    this.midi.initAsync(this.tune)
    .then(() => $('#toast-container .toast').hide());

    this._initUi();
    this.$timeout(() => this._createAbcEditor());
    document.title = `Tunepal.org > Tune > ${this.tune.title}`;
    this.showTune = true;

    this.showEuropeanaLoading = true;
    this.europeanaPortalUrl = EuropeanaApi.getPortalUrl(this.tune);

    EuropeanaApi.searchFetchAsync(this.$http, this.tune, this.$sce, 1, 5)
    .then(results => this._initEuropeanaResults(results));
  }

  _initEuropeanaResults(results) {
    if (results.items.length > 0) {
      this.europeana = results;
      this.showEuropeanaResults = true;
      this.showEuropeanaLoading = false;
      this.$timeout(() => this.utils.view.initTooltips());
    }
    else {
      this.showEuropeanaLoading = false;
      this.showEuropeanaNoResults = true;
    }
  }

  _initUi() {
    this.$timeout(() => {
      this.utils.view.initDropdown();
      this.utils.view.initTooltips();
    });

    $(window).resize(this.apply(() => {
      this._changeLayout();
      this._resizeScore();
    }));

    this._changeLayout();
  }

  _changeLayout() {
    this.isLandscape = Utils.view.isLandscape;
  }

  _createAbcEditor() {
    $('#abc').val(this.tune.notation);

    this.abcEditor = new ABCJS.Editor('abc', {
      paper_id: 'score',
      onchange: () => this._resizeScore(),
    });

    this._resizeScore();
  }

  _resizeScore() {
    const cardContent = $('.score.card-content');
    const cardScore = $('#card-score');
    const score = $('#score');

    const windowWidth = $(window).width();
    const windowHeight = $(window).height();
    let scale = cardScore.width() / score.width();

    if (!this.isEditing || this.isLandscape) {
      cardScore.css('transform', `scale(${scale})`);
      cardContent.height(cardScore.height() * scale);
    }
    else {
      // The "64" below is the pixels of navbar, see _variables.scss:
      // $navbar-height: 64px !default;
      const halfHeight = Utils.view.isMediumOrDown
        ? windowHeight / 2
        : (windowHeight - 64) / 2;

      let cardContentHeight = cardScore.height() * scale;

      if (cardContentHeight > halfHeight) {
        cardContentHeight = halfHeight;
        scale = cardContentHeight / score.height();
      }

      cardScore.css('transform', `scale(${scale})`);
      cardContent.height(cardContentHeight);
    }
  }

  toggleEditing() {
    this.isEditing = !this.isEditing;

    this.$timeout(() => {
      this._resizeScore();

      if (this.isEditing) {
        // scroll to active element
        const scrollTop = $('#card-score').offset().top - Utils.view.navbarHeight - 5;
        $('html, body').animate({scrollTop: scrollTop}, 500);
      }
    });
  }

  showAddThis() {
    const addThisButton = document.querySelector('.addthis_inline_share_toolbox a');
    addThisButton.click();
  }

  downloadAbc() {
    const blob = new Blob([this.tune.notation], {type: 'text/vnd.abc'});
    saveAs(blob, `${this.tune.title}.abc`);
  }
}
