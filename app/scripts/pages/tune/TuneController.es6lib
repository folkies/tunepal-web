import ControllerBase from '../../ControllerBase.es6lib';
import Config from '../../Config.es6lib';
import Tune from '../../models/Tune.es6lib';
import Utils from '../../utils/Utils.es6lib';
import MidiPlayer from './MidiPlayer.es6lib';

export default class TuneController extends ControllerBase {
  constructor($scope, $rootScope, $routeParams, $http, $timeout, $sce) {
    super($scope);
    this.$rootScope = $rootScope;
    this.$timeout = $timeout;
    this.$http = $http;
    this.$sce = $sce;
    this.config = Config;
    this.utils = Utils;

    this.loaded = false;
    this.isEditing = false;

    // MIDI Playback
    this.midi = new MidiPlayer(this.$scope);
    this.$scope.$watchCollection('midi', () => {});

    this.tunepalId = $routeParams['tunepalId'];
    this.europeanaIdEncoded = $routeParams['europeanaIdEncoded'];

    if (Utils.tuneCache && Utils.tuneCache.tunepalId === this.tunepalId) {
      this.tune = Utils.tuneCache;
      this._initTune();
    }
    else {
      this._fetchTune();
    }

    if (this.europeanaIdEncoded) {
      this._initEuropeana();
    }

    this._initUi();
  }

  _fetchTune() {
    const url = `${this.config.ApiDomain}/api/Tunes/${this.tunepalId}`;

    this.$http.get(url)
    .success(rawTune => {
      this.tune = new Tune(rawTune);
      Utils.tuneCache = this.tune;
      this._initTune();
    });
  }

  _initTune() {
    this.midi.initAsync(this.tune);

    this._initUi();
    this.$timeout(() => this._createAbcEditor());
    document.title = `Tunepal.org / Tune / ${this.tune.title}`;
    this.loaded = true;
  }

  _initEuropeana() {
    this.europeanaId = decodeURIComponent(this.europeanaIdEncoded);
    const apiDomain = this.config.EuropeanaApiDomain;
    const apiKey = this.config.EuropeanaApiKey;

    const url = `${apiDomain}/record/${this.europeanaId}.json?wskey=${apiKey}`;

    this.$http.get(url)
    .success(europeana => {
      this.europeana = europeana.object;

      const soundUrl = this.europeana.aggregations[0].edmIsShownBy;
      if (soundUrl) {
        this.europeanaSoundUrl = this.$sce.trustAsResourceUrl(soundUrl);
      }
    });
  }

  _initUi() {
    this.$timeout(() => {
      this.utils.view.initDropdown();
      this.utils.view.initTooltips();
    });

    $(window).resize(() => this._resizeScore());
  }

  _createAbcEditor() {
    $('#abc').val(this.tune.notation);

    this.abcEditor = new ABCJS.Editor('abc', {
      paper_id: 'score',
      onchange: () => this._resizeScore(),
    });

    this._resizeScore();
  }

  _resizeScore() {
    const score = $('#score');
    const cardScore = $('#card-score');
    const cardContent = $('.score.card-content');
    const scale = cardScore.width() / score.width();
    cardScore.css('transform', `scale(${scale})`);
    cardContent.height(cardScore.height() * scale);
  }

  toggleEditing() {
    this.isEditing = !this.isEditing;

    this.$timeout(() => {
      this._resizeScore();

      // scroll to active element
      const scrollTop = this.isEditing
        ? $('#card-editor').offset().top - $('#card-score').offset().top
        : 0;

      $('html, body').animate({scrollTop: scrollTop}, 500);
    });
  }

  showAddThis() {
    const addThisButton = document.getElementById('at4m-sb');
    addThisButton.click();
  }

  toggleToolbar() {
    if (Utils.view.isMobile) {
      $('.page-header nav').fadeToggle();
    }
  }
}
