import Config from '../../Config.es6lib';
import Tune from '../../models/Tune.es6lib';
import Utils from '../../utils/Utils.es6lib';

export default class TuneController {
  constructor($scope, $rootScope, $routeParams, $http, $timeout) {
    this.$rootScope = $rootScope;
    this.$timeout = $timeout;
    this.$http = $http;
    this.config = Config;
    this.utils = Utils;

    this.loaded = false;
    this.isPlaying = false;
    this.isEditing = false;

    this.tunepalId = $routeParams['tunepalId'];

    if (Utils.tuneCache && Utils.tuneCache.tunepalId === this.tunepalId) {
      this.tune = Utils.tuneCache;
      this._initTune();
    }
    else {
      this._fetchTune();
    }

    this._initUi();
  }

  _fetchTune() {
    const url = `${this.config.ApiDomain}/api/Tunes/${this.tunepalId}`;

    this.$http.get(url)
    .success(rawTune => {
      this.tune = new Tune(rawTune);
      this._initTune();
    });
  }

  _initTune() {
    this.loaded = true;
    this.$timeout(() => this._createAbcEditor());
    document.title = `Tunepal.org / Tune / ${this.tune.title}`;
  }

  _initUi() {
    this.$timeout(() => {
      $('.dropdown-button').dropdown({
        constrain_width: false,
      });

      $('.tooltipped').tooltip({
        position: 'bottom',
        delay: 50,
      });
    });

    $(window).resize(() => this._resizeScore());
  }

  _createAbcEditor() {
    $('#abc').val(this.tune.notation);

    this.abcEditor = new ABCJS.Editor('abc', {
      paper_id: 'score',
      onchange: () => this._resizeScore(),
    });

    this._resizeScore();

    this.tune.titleEncoded = encodeURIComponent(this.tune.title);
  }

  _resizeScore() {
    const score = $('#score');
    const cardScore = $('#card-score');
    const cardContent = $('.score.card-content');
    const scale = cardScore.width() / score.width();
    cardScore.css('transform', `scale(${scale})`);
    cardContent.height(cardScore.height() * scale);
  }

  goBack() {
    if (history.length == 1) {
      location.href = '/#!/record';
    }
    else {
      history.back();
    }
  }

  togglePlaying() {
    this.isPlaying = !this.isPlaying;
  }

  stopPlaying() {
    this.isPlaying = false;
  }

  toggleEditing() {
    this.isEditing = !this.isEditing;

    this.$timeout(() => {
      this._resizeScore();

      // scroll to active element
      const scrollTop = this.isEditing
        ? $('#card-editor').offset().top - $('#card-score').offset().top
        : 0;

      $("html, body").animate({scrollTop: scrollTop}, 500);
    });
  }

  downloadMidi() {
    const hiddenMidi = $('#hiddenMidi');
    const midiWriter = new ABCJS.midi.MidiWriter(hiddenMidi[0]);
    midiWriter.writeABC(this.abcEditor.tunes[0]);
    const midi = hiddenMidi.children('a').attr('href');

    const blob = this.dataURLToBlob(midi);
    saveAs(blob, `${this.tune.title}.midi`);
  }

  dataURLToBlob(dataURL) {
    const BASE64_MARKER = ';base64,';

    if (dataURL.indexOf(BASE64_MARKER) == -1) {
      // percent encoded
      const parts = dataURL.split(',');
      const contentType = parts[0].split(':')[1];
      const raw = parts[1];
      const numPercent = (raw.match(/%/g) || []).length;
      const length = raw.length - numPercent * 2;
      const uInt8Array = new Uint8Array(length);

      for (let i = 0, j = 0; i < raw.length; j++) {
        if (raw[i] === '%') {
          const code = raw.substr(i + 1, 2);
          uInt8Array[j] = parseInt(code, 16);
          i += 3;
        }
        else {
          uInt8Array[j] = raw.charCodeAt(i);
          i++;
        }
      }

      return new Blob([uInt8Array], {type: contentType});
    }
    else {
      // base64 encoded
      const parts = dataURL.split(BASE64_MARKER);
      const contentType = parts[0].split(':')[1];
      const raw = window.atob(parts[1]);
      const rawLength = raw.length;

      const uInt8Array = new Uint8Array(rawLength);

      for (let i = 0; i < rawLength; ++i) {
        uInt8Array[i] = raw.charCodeAt(i);
      }

      return new Blob([uInt8Array], {type: contentType});
    }
  }

  showAddThis() {
    const addThisButton = document.getElementById('at4m-sb');
    addThisButton.click();
  }

  toggleToolbar() {
    if (Utils.view.isMobile) {
      $('.page-header nav').fadeToggle();
    }
  }
}
