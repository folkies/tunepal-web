import ControllerBase from '../../ControllerBase.es6lib';
import Config from '../../Config.es6lib';
import Utils from '../../utils/Utils.es6lib';

export default class SettingsController extends ControllerBase {
  constructor($scope, $rootScope, $http) {
    super($scope);
    this.$http = $http;
    this.config = Config;
    this.utils = Utils;

    this.showLoading = true;
    this.showTunebooks = false;

    this._initMidiInstruments();
    this.validatePlaybackSpeed();
    this._initPopupOptions();

    document.title = 'Tunepal.org / Settings';
  }

  _initPopupOptions() {
    // if screen is medium or up
    if ($(window).width() > 600) {
      $('.bottom-sheet').removeClass('bottom-sheet')
    }

    // bind modal triggers to their modals
    $('.modal-trigger').leanModal({
      complete: () => {
        this.showLoading = true;
        this.showTunebooks = false;
      }
    });

    // scroll to the first selected item when modal is popping up
    $('.modal-trigger').each((i, trigger) => {
      $(trigger).click(() => {
        const modal = $(trigger.hash);
        const content = modal.find('.modal-content');
        const current = content.find('.secondary-content').parent();
        if (current == null) return;

        const scrollTop = current[0].offsetTop + current.outerHeight() - content.height() / 2;
        content.animate({scrollTop: scrollTop}, 500);
      });
    });
  }

  _initMidiInstruments() {
    $.each(Config.MidiInstruments, function (i, item) {
      $('select[model="settings.config.melody"]').append($('<option>', {
        value: item,
        text : item
      }));

      $('select[model="settings.config.chords"]').append($('<option>', {
        value: item,
        text : item
      }));
    });
  }

  set(key, value) {
    this.config[key] = value;
    $(`#${key}-sheet`).closeModal();
  }

  setTunebooks(id) {
    this.config.tunebooks.toggle(id);
  }

  validatePlaybackSpeed() {
    let value = parseInt(this.config.playbackSpeed);
    let input = $('input[ng-model="settings.config.playbackSpeed"]');

    if (isNaN(value) || value <= 0) {
      input.removeClass('valid').addClass('invalid');
    }
    else {
      input.removeClass('invalid').addClass('valid');
    }
  }

  updateTunebooks() {
    this.config.tunebooks.updateTunebooks(this.$http)
    .then(this.apply(() => {
      this.showLoading = false;
      this.showTunebooks = true;
    }));
  }
}
