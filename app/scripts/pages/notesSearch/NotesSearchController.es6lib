import Config from '../../Config.es6lib';
import Utils from '../../utils/Utils.es6lib';
import Tune from '../../models/Tune.es6lib';

export default class NotesSearchController {
  constructor($scope, $rootScope, $routeParams, $http, $timeout) {
    this.$scope = $scope;  // view model
    this.$routeParams = $routeParams;
    this.$http = $http;
    this.$timeout = $timeout;
    this.config = Config;
    this.utils = Utils;

    this.showLoading = true;
    this.showResults = false;
    this.showNoResults = false;

    this.notes = $routeParams['notes'];

    if (Utils.cache.notesSearch.notes === this.notes) {
      this.tunes = Utils.cache.notesSearch.results;
      this.showConfidencePopup = false;
      this._initTunes();
    }
    else {
      this.showConfidencePopup = true;
      this._fetchTunes();
    }

    document.title = 'Tunepal.org > Notes Search';
  }

  _fetchTunes() {
    const sources = Utils.joinSet(this.config.tunebooks.selectedIds);
    const latitude = 1; //TODO
    const longitude = 2;
    const client = 'tunepal.org';
    const localTimestamp = Utils.date.format(new Date());

    const url = `${this.config.ApiDomain}/api/mattSearch`
    + `?q=${this.notes}`
    + `&sources=${sources}`
    + `&latitude=${latitude}`
    + `&longitude=${longitude}`
    + `&client=${client}`
    + `&key_sigs=${this.config.timeSigs}`
    + `&local_tstamp=${localTimestamp}`;

    this.$http.get(url)
    .success(rawTunes => {
      this.tunes = [];

      for (const rawTune of rawTunes) {
        this.tunes.push(new Tune(rawTune));
      }

      Utils.cache.notesSearch = {notes: this.notes, results: this.tunes};

      this._initTunes();
    });
  }

  _initTunes() {
    if (this.tunes.length === 0) {
      this.showNoResults = true;
    }
    else {
      this._calcPages();
      this._initUi();
      this.showResults = true;
    }

    this.showLoading = false;
  }

  _calcPages() {
    this.pageSize = 10;
    this.pages = new Array(Math.ceil(this.tunes.length / this.pageSize));

    for (let i = 0; i < this.pages.length; i++) {
      this.pages[i] = {
        startIndex: i * this.pageSize,
        start: i * this.pageSize + 1,
        end: (i + 1) * this.pageSize,
      }
    }

    this.pages[this.pages.length - 1].end = this.tunes.length;
  }

  _initUi() {
    if (this.showConfidencePopup) {
      $('#confidence-popup').openModal();
    }
  }
}
