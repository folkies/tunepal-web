import Config from '../../Config.es6lib';
import Tune from '../../models/Tune.es6lib';

export default class NotesSearchController {
  constructor($scope, $rootScope, $routeParams, $http) {
    this.$scope = $scope;  // view model
    this.$routeParams = $routeParams;
    this.$http = $http;
    this.config = Config;

    this.loaded = false;

    this.notes = $routeParams['notes'];
    this._fetchTunes();
  }

  _fetchTunes() {
    //const sources = this.config.tunebooks.selectedIds.join();//TODO
    const sources = 1;
    const latitude = 1; //TODO
    const longitude = 2;
    const client = 'tunepal.org';
    const localTimestamp = this.config.formatDate(new Date());

    const url = `${this.config.ApiDomain}/api/mattSearch`
    + `?q=${this.notes}`
    + `&sources=${sources}`
    + `&latitude=${latitude}`
    + `&longitude=${longitude}`
    + `&client=${client}`
    + `&key_sigs=${this.config.timeSigs}`
    + `&local_tstamp=${localTimestamp}`;

    this.$http.get(url)
    .success(data => {
      this.tunes = [];

      for (const i of data) {
        this.tunes.push(new Tune(i.tunepalid, i.title, i.sourceId, i.keySignature, i.tuneType, i.confidence));
      }

      this._calcPages();

      this.loaded = true;
    });
  }

  _calcPages() {
    this.pageSize = 10;
    this.pages = new Array(Math.ceil(this.tunes.length / this.pageSize));

    for (let i = 0; i < this.pages.length; i++) {
      this.pages[i] = {
        startIndex: i * this.pageSize,
        start: i * this.pageSize + 1,
        end: (i + 1) * this.pageSize,
      }
    }

    this.pages[this.pages.length - 1].end = this.tunes.length;
  }
}
