import ControllerBase from '../../ControllerBase.es6lib';
import Config from '../../Config.es6lib';
import EuropeanaApi from '../../models/EuropeanaApi.es6lib';
import Tune from '../../models/Tune.es6lib';
import TunepalApi from '../../models/TunepalApi.es6lib';
import Utils from '../../utils/Utils.es6lib';

export default class EuropeanaController extends ControllerBase {
  constructor($scope, $rootScope, $routeParams, $http, $timeout, $location) {
    super($scope);
    this.config = Config;
    this.utils = Utils;
    this.$http = $http;
    this.$timeout = $timeout;
    this.$location = $location;

    this.showLoading = true;
    this.showNoResults = false;
    this.showResults = false;

    const tunepalId = $routeParams['tunepalId'];
    const tunepalIdEncoded = encodeURIComponent(tunepalId);

    if (Utils.cache.tune.tunepalId === tunepalId) {
      this.tune = Utils.cache.tune;
      this._search();
    }
    else {
      TunepalApi.fetchTuneAsync(this.$http, tunepalIdEncoded)
      .then(tune => {
        this.tune = tune;
        this._search();
      });
    }
  }

  _search() {
    this._europeanaIdsDb = Utils.localStorage.getItem('europeanaIds');
    this._europeanaIdsDb = this._europeanaIdsDb || {};
    this._europeanaIds = this._europeanaIdsDb[this.tune.tunepalId];

    if (Utils.cache.europeana.id === this.tune.tunepalId) {
      this._initResults(Utils.cache.europeana.results);
    }
    else {
      EuropeanaApi.searchAsync(this.$http, this.tune)
      .then(this.apply(results => this._initResults(results)));
    }

    document.title = `Tunepal.org > Europeana Search > ${this.tune.title}`;
  }

  _initResults(results) {
    this.results = results;

    if (results && results.items && results.items.length > 0) {
      this.pageSize = 10;
      this.pages = this._calcPages(this.results.items, this.pageSize);
      this._initUi();
      this.showResults = true;
    }
    else {
      this.showNoResults = true;
    }

    this.showLoading = false;
  }

  link(tune) {
    const index = this._europeanaIds.indexOf(tune.id);
    if (index === -1) {
      this._europeanaIds.push(tune.id);
      Utils.localStorage.setItem('europeanaIds', this._europeanaIdsDb);
    }
    this.$location.url(`/tune/${this.tune.tunepalIdEncoded}`);
  }

  unlink(tune) {
    const index = this._europeanaIds.indexOf(tune.id);
    if (index > -1) {
      this._europeanaIds.splice(index, 1);
      Utils.localStorage.setItem('europeanaIds', this._europeanaIdsDb);
    }
  }

  _initUi() {
    this.$timeout(() => this.utils.view.initTooltips());
  }
}
