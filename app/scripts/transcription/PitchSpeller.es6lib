import Utils from '../Utils.es6lib';

export default class PitchSpeller {
  get fundamental() { return this._fundamental; }
  set fundamental(value) {
    this._fundamental = value;
    this._fundamentalFrequency = PitchSpeller.FUNDAMENTAL_FREQUENCIES[value];
  }

  constructor(fundamental = 'D', mode = 'major') {
    this.fundamental = fundamental;

    this._pitchModel = PitchSpeller.PitchModel.FLUTE;
    this._knownFrequencies = new Array(PitchSpeller.ABC_NOTE_RANGE);
    this._midiNotes = new Array(PitchSpeller.MIDI_NOTE_RANGE);

    this._makeScale(mode);
    this._makeMidiNotes();
  }

  _makeScale(mode) {
    // W - W - H - W - W - H - H - H
    let majorKeyIntervals = [1, 2, 4, 5];

    if (mode == 'major') {
      if (this._pitchModel == PitchSpeller.PitchModel.FLUTE) {
        this._knownFrequencies[0] = this._fundamentalFrequency / Math.pow(PitchSpeller.RATIO, 12);
      }
      else {
        // Use the whistle pitch model
        this._knownFrequencies[0] = this._fundamentalFrequency;
      }

      // W - W - H - W - W - W - H
      for (let i = 1; i < this._knownFrequencies.length; i++) {
        if (PitchSpeller._isWholeToneInterval(i, majorKeyIntervals)) {
          this._knownFrequencies[i] = this._knownFrequencies[i - 1] * PitchSpeller.RATIO_SQUARED;
        }
        else {
          this._knownFrequencies[i] = this._knownFrequencies[i - 1] * PitchSpeller.RATIO;
        }
      }
    }
  }

  static _isWholeToneInterval(n, intervals) {
    n %= 8;
    return intervals.some(interval => interval == n);
  }

  _makeMidiNotes() {
    this._midiNotes[0] = 27.5;

    for (let i = 1; i < this._midiNotes.length; i++) {
      this._midiNotes[i] = this._midiNotes[i - 1] * PitchSpeller.RATIO;
    }
  }

  spellFrequency(frequency) {
    let minIndex = 0;
    let minDiff = Number.MAX_VALUE;

    if (frequency < this._knownFrequencies[0] || frequency > this._knownFrequencies.last()) {
      return 'Z';
    }

    for (let i = 0; i < this._knownFrequencies.length; i++) {
      let difference = Math.abs(frequency - this._knownFrequencies[i]);
      if (difference < minDiff) {
        minIndex = i;
        minDiff = difference;
      }
    }

    return PitchSpeller.NOTE_NAMES[minIndex];
  }

  spellFrequencyAsMidi(frequency) {
    let minIndex = 0;
    let minDiff = Number.MAX_VALUE;

    if (frequency < this._midiNotes[0] || frequency > this._midiNotes.last()) {
      return 'Z';
    }

    for (let i = 0; i < this._midiNotes.length; i++) {
      let difference = abs(frequency - this._midiNotes[i]);
      if (difference < minDiff) {
        minIndex = i;
        minDiff = difference;
      }
    }

    minIndex += PitchSpeller.MIDI_OFFSET;
    return minIndex.toString();
  }
}

PitchSpeller.PitchModel = Utils.createEnum([
  'FLUTE',
  'WHISTLE',
]);

PitchSpeller.RANGE = 0.1;
PitchSpeller.RATIO = 1.05946309436;
PitchSpeller.RATIO_SQUARED = PitchSpeller.RATIO * PitchSpeller.RATIO;
PitchSpeller.ABC_NOTE_RANGE = 33;
PitchSpeller.MIDI_NOTE_RANGE = 87;
PitchSpeller.MIDI_OFFSET = 21;

PitchSpeller.NOTE_NAMES = [
  'D', 'E', 'F', 'G', 'A', 'B', 'C', 'C',
  'D', 'E', 'F', 'G', 'A', 'B', 'C', 'C',
  'D', 'E', 'F', 'G', 'A', 'B', 'C', 'C',
  'D', 'E', 'F', 'G', 'A', 'B', 'C', 'C', 'D'
];

PitchSpeller.FUNDAMENTAL_FREQUENCIES = {
  Bb: 233.08,
  B: 246.94,
  C: 261.63,
  D: 293.66,
  Eb: 311.13,
  F: 349.23,
  G: 392.00
};
